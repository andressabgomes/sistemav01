#!/usr/bin/env node

/**
 * Guia de Migra√ß√£o via Interface Web do Xano
 * Instru√ß√µes para migrar dados usando a interface web
 * Execute: node scripts/web-migration-guide.js
 */

import { readFileSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// Obter o diret√≥rio atual do m√≥dulo ES6
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Carregar vari√°veis de ambiente
function loadEnv() {
  try {
    const envPath = join(__dirname, '..', '.env.local');
    const envContent = readFileSync(envPath, 'utf8');
    const env = {};
    
    envContent.split('\n').forEach(line => {
      const [key, ...valueParts] = line.split('=');
      if (key && !key.startsWith('#')) {
        env[key.trim()] = valueParts.join('=').trim();
      }
    });
    
    return env;
  } catch (error) {
    console.log('‚ö†Ô∏è  Arquivo .env.local n√£o encontrado, usando configura√ß√µes padr√£o');
    return {};
  }
}

const env = loadEnv();

// Configura√ß√µes
const XANO_WORKSPACE = 'x8ki-letl-twmt.n7.xano.io';
const XANO_API_KEY = env.VITE_XANO_API_KEY || 'hzPTkRyB';

console.log('üåê GUIA DE MIGRA√á√ÉO VIA INTERFACE WEB DO XANO');
console.log('================================================\n');

console.log('üîß CONFIGURA√á√ÉO NECESS√ÅRIA:');
console.log('============================');
console.log(`üìã Workspace: ${XANO_WORKSPACE}`);
console.log(`üîë API Key: ${XANO_API_KEY}`);
console.log('üåê URL do Painel: https://x8ki-letl-twmt.n7.xano.io\n');

console.log('üìã PASSO A PASSO PARA MIGRA√á√ÉO:');
console.log('================================\n');

console.log('1Ô∏è‚É£ ACESSAR O PAINEL DO XANO');
console.log('   ‚Ä¢ Acesse: https://x8ki-letl-twmt.n7.xano.io');
console.log('   ‚Ä¢ Fa√ßa login com suas credenciais\n');

console.log('2Ô∏è‚É£ VERIFICAR CONFIGURA√á√ÉO DA API');
console.log('   ‚Ä¢ V√° para "API" no menu lateral');
console.log('   ‚Ä¢ Verifique se a API est√° habilitada');
console.log('   ‚Ä¢ Confirme se a chave da API est√° correta\n');

console.log('3Ô∏è‚É£ CRIAR TABELAS MANUALMENTE');
console.log('   ‚Ä¢ V√° para "Database" no menu lateral');
console.log('   ‚Ä¢ Clique em "Create Table" para cada tabela:\n');

console.log('   üìä TABELA: clients');
console.log('      ‚Ä¢ id (UUID, Primary Key)');
console.log('      ‚Ä¢ name (VARCHAR, Required)');
console.log('      ‚Ä¢ email (VARCHAR, Required, Unique)');
console.log('      ‚Ä¢ phone (VARCHAR, Optional)');
console.log('      ‚Ä¢ company (VARCHAR, Optional)');
console.log('      ‚Ä¢ status (VARCHAR, Default: active)');
console.log('      ‚Ä¢ tier (VARCHAR, Optional)');
console.log('      ‚Ä¢ segment (VARCHAR, Optional)');
console.log('      ‚Ä¢ size (VARCHAR, Optional)');
console.log('      ‚Ä¢ documentType (VARCHAR, Optional)');
console.log('      ‚Ä¢ documentNumber (VARCHAR, Optional)');
console.log('      ‚Ä¢ createdAt (TIMESTAMP, Default: now())');
console.log('      ‚Ä¢ updatedAt (TIMESTAMP, Default: now())\n');

console.log('   üìä TABELA: tickets');
console.log('      ‚Ä¢ id (UUID, Primary Key)');
console.log('      ‚Ä¢ title (VARCHAR, Required)');
console.log('      ‚Ä¢ description (TEXT, Required)');
console.log('      ‚Ä¢ status (VARCHAR, Default: open)');
console.log('      ‚Ä¢ priority (VARCHAR, Default: medium)');
console.log('      ‚Ä¢ category (VARCHAR, Required)');
console.log('      ‚Ä¢ clientId (UUID, Required)');
console.log('      ‚Ä¢ agentId (UUID, Optional)');
console.log('      ‚Ä¢ createdAt (TIMESTAMP, Default: now())');
console.log('      ‚Ä¢ updatedAt (TIMESTAMP, Default: now())\n');

console.log('   üìä TABELA: articles');
console.log('      ‚Ä¢ id (UUID, Primary Key)');
console.log('      ‚Ä¢ title (VARCHAR, Required)');
console.log('      ‚Ä¢ content (TEXT, Required)');
console.log('      ‚Ä¢ category (VARCHAR, Required)');
console.log('      ‚Ä¢ tags (JSON, Optional)');
console.log('      ‚Ä¢ authorId (UUID, Optional)');
console.log('      ‚Ä¢ isPublished (BOOLEAN, Default: false)');
console.log('      ‚Ä¢ viewCount (INTEGER, Default: 0)');
console.log('      ‚Ä¢ helpfulCount (INTEGER, Default: 0)');
console.log('      ‚Ä¢ createdAt (TIMESTAMP, Default: now())');
console.log('      ‚Ä¢ updatedAt (TIMESTAMP, Default: now())\n');

console.log('   üìä TABELA: team_members');
console.log('      ‚Ä¢ id (UUID, Primary Key)');
console.log('      ‚Ä¢ name (VARCHAR, Required)');
console.log('      ‚Ä¢ email (VARCHAR, Required, Unique)');
console.log('      ‚Ä¢ role (VARCHAR, Required)');
console.log('      ‚Ä¢ department (VARCHAR, Required)');
console.log('      ‚Ä¢ skills (JSON, Optional)');
console.log('      ‚Ä¢ maxTickets (INTEGER, Default: 50)');
console.log('      ‚Ä¢ currentLoad (INTEGER, Default: 0)');
console.log('      ‚Ä¢ isAvailable (BOOLEAN, Default: true)');
console.log('      ‚Ä¢ createdAt (TIMESTAMP, Default: now())');
console.log('      ‚Ä¢ updatedAt (TIMESTAMP, Default: now())\n');

console.log('   üìä TABELA: schedules');
console.log('      ‚Ä¢ id (UUID, Primary Key)');
console.log('      ‚Ä¢ userId (UUID, Required)');
console.log('      ‚Ä¢ date (DATE, Required)');
console.log('      ‚Ä¢ startTime (TIME, Required)');
console.log('      ‚Ä¢ endTime (TIME, Required)');
console.log('      ‚Ä¢ type (VARCHAR, Default: work)');
console.log('      ‚Ä¢ status (VARCHAR, Default: confirmed)');
console.log('      ‚Ä¢ notes (TEXT, Optional)');
console.log('      ‚Ä¢ createdAt (TIMESTAMP, Default: now())');
console.log('      ‚Ä¢ updatedAt (TIMESTAMP, Default: now())\n');

console.log('   üìä TABELA: goals');
console.log('      ‚Ä¢ id (UUID, Primary Key)');
console.log('      ‚Ä¢ userId (UUID, Required)');
console.log('      ‚Ä¢ title (VARCHAR, Required)');
console.log('      ‚Ä¢ description (TEXT, Required)');
console.log('      ‚Ä¢ target (DECIMAL, Required)');
console.log('      ‚Ä¢ current (DECIMAL, Default: 0)');
console.log('      ‚Ä¢ unit (VARCHAR, Required)');
console.log('      ‚Ä¢ period (VARCHAR, Required)');
console.log('      ‚Ä¢ status (VARCHAR, Default: not_started)');
console.log('      ‚Ä¢ startDate (DATE, Required)');
console.log('      ‚Ä¢ endDate (DATE, Required)');
console.log('      ‚Ä¢ createdAt (TIMESTAMP, Default: now())');
console.log('      ‚Ä¢ updatedAt (TIMESTAMP, Default: now())\n');

console.log('4Ô∏è‚É£ CONFIGURAR AUTENTICA√á√ÉO');
console.log('   ‚Ä¢ V√° para "API > Auth"');
console.log('   ‚Ä¢ Clique em "Enable Auth"');
console.log('   ‚Ä¢ Configure campos: email, password, confirm_password');
console.log('   ‚Ä¢ Salve as configura√ß√µes\n');

console.log('5Ô∏è‚É£ CONFIGURAR CORS');
console.log('   ‚Ä¢ V√° para "API > Settings"');
console.log('   ‚Ä¢ Em "CORS", adicione:');
console.log('     - http://localhost:8080 (desenvolvimento)');
console.log('     - https://seu-dominio.com (produ√ß√£o)\n');

console.log('6Ô∏è‚É£ TESTAR CONECTIVIDADE');
console.log('   ‚Ä¢ Execute: node scripts/test-xano-connection.js');
console.log('   ‚Ä¢ Verifique se todas as tabelas est√£o acess√≠veis\n');

console.log('7Ô∏è‚É£ EXECUTAR MIGRA√á√ÉO');
console.log('   ‚Ä¢ Execute: node scripts/migrate-to-xano.js');
console.log('   ‚Ä¢ Monitore o progresso da migra√ß√£o\n');

console.log('8Ô∏è‚É£ VERIFICAR DADOS');
console.log('   ‚Ä¢ Acesse cada tabela no painel do Xano');
console.log('   ‚Ä¢ Confirme que os dados foram migrados corretamente\n');

console.log('üö® PROBLEMAS COMUNS:');
console.log('======================');
console.log('‚ùå Erro 404: Tabela n√£o encontrada');
console.log('   ‚Ä¢ Verifique se a tabela foi criada corretamente');
console.log('   ‚Ä¢ Confirme o nome da tabela no endpoint\n');

console.log('‚ùå Erro 401: N√£o autorizado');
console.log('   ‚Ä¢ Verifique se a API key est√° correta');
console.log('   ‚Ä¢ Confirme se a autentica√ß√£o est√° habilitada\n');

console.log('‚ùå Erro 500: Erro interno');
console.log('   ‚Ä¢ Verifique os logs do Xano');
console.log('   ‚Ä¢ Confirme se a estrutura da tabela est√° correta\n');

console.log('‚ùå Timeout');
console.log('   ‚Ä¢ Aumente o timeout no cliente');
console.log('   ‚Ä¢ Verifique a conectividade de rede\n');

console.log('\nüí° DICAS IMPORTANTES:');
console.log('======================');
console.log('‚Ä¢ Crie as tabelas uma por vez para evitar conflitos');
console.log('‚Ä¢ Use nomes de tabela em min√∫sculas e com underscores');
console.log('‚Ä¢ Configure √≠ndices para campos frequentemente consultados');
console.log('‚Ä¢ Teste cada endpoint ap√≥s criar a tabela');
console.log('‚Ä¢ Fa√ßa backup antes de executar a migra√ß√£o\n');

console.log('üîó LINKS √öTEIS:');
console.log('================');
console.log('‚Ä¢ Painel do Xano: https://x8ki-letl-twmt.n7.xano.io');
console.log('‚Ä¢ Documenta√ß√£o: https://docs.xano.com/');
console.log('‚Ä¢ Comunidade: https://community.xano.com/\n');

console.log('üìû SUPORTE:');
console.log('============');
console.log('‚Ä¢ Se precisar de ajuda, acesse o painel do Xano');
console.log('‚Ä¢ Use o chat de suporte integrado');
console.log('‚Ä¢ Consulte a documenta√ß√£o oficial\n');

console.log('üéØ PR√ìXIMOS PASSOS:');
console.log('====================');
console.log('1. Acesse o painel do Xano');
console.log('2. Crie as tabelas conforme especificado');
console.log('3. Configure a autentica√ß√£o');
console.log('4. Teste a conectividade');
console.log('5. Execute a migra√ß√£o de dados');
console.log('6. Verifique a integridade dos dados\n');

console.log('üöÄ BOA SORTE COM A MIGRA√á√ÉO!');
console.log('=============================');
console.log('Seu StarPrint CRM estar√° funcionando com o Xano em breve! üéâ\n');
